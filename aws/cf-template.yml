AWSTemplateFormatVersion: "2010-09-09"
Description: "An example CF template to work with the image processing lambda and step function"
Resources:
  ######################## IAM ROLES ########################
  LambdaGrayscalerAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: LambdaGrayscalerAccessRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaS3FullAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: "*"
        - PolicyName: LoggingPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda/GrayscalerLambda:*

  LambdaNSFWCheckAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: LambdaNSFWCheckAccessRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaNSFWCheckAccessToRekognitionAndS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "rekognition:*"
                  - "s3:*"
                Resource: "*"
        - PolicyName: LoggingPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda/NSFWCheckerLambda:*
  ######################## LOGGING ########################
  GrayscalerLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /aws/lambda/GrayscalerLambda
      RetentionInDays: 30

  NsfwcheckLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /aws/lambda/NSFWCheckerLambda
      RetentionInDays: 30
  ######################## LAMBDAS ########################
  GrayscalerLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables:
          OUT_BUCKET: !Ref ImageOutBucket
      FunctionName: GrayscalerLambda
      Handler: "index.handler"
      Role: !GetAtt LambdaGrayscalerAccessRole.Arn
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
              callback(null, "Hello World!");
          };
      Runtime: "nodejs18.x"
      Timeout: "30"
      TracingConfig:
        Mode: Active

  NSFWCheckerLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: NSFWCheckerLambda
      Handler: "index.handler"
      Role: !GetAtt LambdaNSFWCheckAccessRole.Arn
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
              callback(null, "Hello World!");
          };
      Runtime: "nodejs18.x"
      Timeout: "30"
      TracingConfig:
        Mode: Active
  ######################## S3 Buckets ########################
  ImageInBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  ImageOutBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  MyEventRuleRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EventBridgeExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: states:startExecution
                Resource: !GetAtt MyStateMachine.Arn

  ImageProcessingEventBridgeRule:
    Type: "AWS::Events::Rule"
    Properties:
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Ref ImageInBucket
      State: ENABLED
      Targets:
        - Arn: !GetAtt MyStateMachine.Arn
          Id: "InvokeStateMachine"
          RoleArn: !GetAtt MyEventRuleRole.Arn

  MyStateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: "*"

  MyStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      RoleArn: !GetAtt MyStateMachineRole.Arn
      DefinitionString:
        !Sub |
        {
          "StartAt": "InvokeLambda",
          "States": {
            "InvokeLambda": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:NSFWCheckerLambda",
              "End": true
            }
          }
        }